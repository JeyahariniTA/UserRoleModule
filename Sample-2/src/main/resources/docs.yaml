openapi: 3.0.1
info:
  title: User Role Module API
  version: "2.0"
servers:
- url: http://localhost:8888
  description: Generated server url
paths:
  /user/update:
    put:
      tags:
      - user-controller
      operationId: updateUserById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /role/update:
    put:
      tags:
      - role-controller
      operationId: updateRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleDto'
  /user/add:
    post:
      tags:
      - user-controller
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /role/add:
    post:
      tags:
      - role-controller
      operationId: addRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleDto'
  /register:
    post:
      tags:
      - jwt-authentication-controller
      operationId: saveUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /project/add:
    post:
      tags:
      - project-controller
      operationId: addProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Project'
  /authenticate:
    post:
      tags:
      - jwt-authentication-controller
      operationId: createAuthenticationToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwtRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /user/{id}:
    patch:
      tags:
      - user-controller
      operationId: updateCustomer
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonPatch'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /user/update/{id}/{gender}:
    patch:
      tags:
      - user-controller
      operationId: updatePartially
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: gender
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /user/get:
    get:
      tags:
      - user-controller
      operationId: getUsers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
  /user/getWithRoleProject/{projectId}:
    get:
      tags:
      - user-controller
      operationId: listUsersWithRoleAndProject
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: array
                  items:
                    type: object
  /user/getByRoleId/{roleId}:
    get:
      tags:
      - user-controller
      operationId: getUsersByRoleId
      parameters:
      - name: roleId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
  /user/getByProjectId/{projectId}:
    get:
      tags:
      - user-controller
      operationId: listUsersByProjectId
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /user/get/{userId}:
    get:
      tags:
      - user-controller
      operationId: getUserById
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
  /user/get/{pageNo}/{userCount}:
    get:
      tags:
      - user-controller
      operationId: getUsersWithPagination
      parameters:
      - name: pageNo
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: userCount
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
  /user/Hello:
    get:
      tags:
      - user-controller
      operationId: sayHello
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /role/get:
    get:
      tags:
      - role-controller
      operationId: listRoles
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MappingJacksonValue'
  /role/getByUserId/{userId}:
    get:
      tags:
      - role-controller
      operationId: getRolesByUserId
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleDto'
  /role/get/{roleName}:
    get:
      tags:
      - role-controller
      operationId: getRolesByName
      parameters:
      - name: roleName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleDto'
  /project/get:
    get:
      tags:
      - project-controller
      operationId: listProjects
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
  /msg:
    get:
      tags:
      - message-controller
      operationId: getMsg
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /user/delete/{userId}:
    delete:
      tags:
      - user-controller
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /role/delete/{roleId}:
    delete:
      tags:
      - role-controller
      operationId: deleteRole
      parameters:
      - name: roleId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: integer
          format: int32
        doorNo:
          type: string
        street:
          type: string
        city:
          type: string
        type:
          type: string
    Project:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
    Role:
      type: object
      properties:
        createdBy:
          type: string
        updatedBy:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        rowVersion:
          type: integer
          format: int32
        id:
          type: integer
          format: int32
        role:
          type: string
    User:
      type: object
      properties:
        createdBy:
          type: string
        updatedBy:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        rowVersion:
          type: integer
          format: int32
        id:
          type: integer
          format: int32
        name:
          type: string
        gender:
          type: string
        dob:
          type: string
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        role:
          $ref: '#/components/schemas/Role'
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    RoleDto:
      type: object
      properties:
        roleId:
          type: integer
          format: int32
        roleName:
          type: string
    CredentialsDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    JwtRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    JsonPatch:
      type: object
    UserDto:
      type: object
      properties:
        userId:
          type: integer
          format: int32
        userName:
          type: string
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        role:
          $ref: '#/components/schemas/RoleDto'
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        dob:
          type: string
        gender:
          type: string
    FilterProvider:
      type: object
    MappingJacksonValue:
      type: object
      properties:
        value:
          type: object
        filters:
          $ref: '#/components/schemas/FilterProvider'
